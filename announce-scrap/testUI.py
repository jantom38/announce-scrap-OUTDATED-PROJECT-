# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import json
from bs4 import BeautifulSoup
from requests import get
import os.path
from win10toast_click import ToastNotifier
import webbrowser
import time


city = "Kielce"
page_of_main = 0
main_url = f"https://www.olx.pl/d/nieruchomosci/stancje-pokoje/{city}/?search%5Border%5D=created_at:desc&page={page_of_main}"
page = get(main_url)
number_of_main = []
dict_of_flats = {}
new_url = []


def remove_useless_words(text):
    text = text.replace("do negocjacji","").replace("Odświeżono dnia","").replace(f'{city} -', "").replace("zł","").replace(" ","")
    return text


def urls_difference(dict, dict1):
    difference = set(dict)-set(dict1)
    if difference != set():
        return difference
    else:
        return False


def open_url():
    for elements in new_url:
        try:
            webbrowser.open_new("https://www.olx.pl"+elements)
        except:
            print('Failed to open URL. Unsupported variable type.')


def new_url_not():
    toaster = ToastNotifier()
    communicate_url = ""
    for element in new_url:
        communicate_url+=element + " "
    toaster.show_toast("Znaleziono nowe ogłoszenia!","kliknij by wyświetlić",duration = 5, threaded=True, callback_on_click=open_url)


def scrap():
    global main_url, page, new_url
    bs = BeautifulSoup(page.content, "html.parser")
    for pagination in bs.find_all("a", class_="css-1mi714g"):
        number_of_main.append(pagination.text)
    for element in number_of_main:
        main_url = f"https://www.olx.pl/d/nieruchomosci/stancje-pokoje/{city}/?search%5Border%5D=created_at:desc&page={element}"
        page = get(main_url)
        bs = BeautifulSoup(page.content, "html.parser")
        for offer in bs.find_all("a", class_="css-1bbgabe"):
            link = offer["href"]
            parameter = []
            parameter.append(remove_useless_words(offer.find("p", class_="css-wpfvmn-Text eu5v0x0").text))
            parameter.append(remove_useless_words(offer.find("p", class_="css-p6wsjo-Text eu5v0x0").text))
            dict_of_flats[link] = parameter
    file_in = dict_of_flats
    if os.path.exists("offers.json"):
        with open("offers.json", "r") as file:
            file_out = json.load(file)

        if file_out != file_in:
            print("overwrited")
            with open("offers.json", "w") as file:
                file.write(json.dumps(file_in))
                new_url = urls_difference(file_in, file_out)
                if new_url:
                    new_url_not()
        else:
            print("continued")

    else:
        with open("offers.json", "w") as file:
            file.write(json.dumps(file_in))
def start_of_searching():
    while True:
        scrap()
        time.sleep(5)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(580, 420, 131, 41))
        self.pushButton.clicked.connect(self.initiate())
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(190, 240, 421, 31))
        self.textEdit.setObjectName("textEdit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Uruchom"))
    def initiate(self):

        print("ju")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
